syntax = "proto3";

package file_transfer;

service FLServer {
    rpc TransferFile (stream FileChunk) returns (FileResponse) {}
    rpc RegisterClient (ClientInfo) returns (ClientResponse) {}
    rpc DeregisterClient (ClientInfo) returns (ClientResponse) {}
}

service Client {
    rpc TransferFile (stream FileChunk) returns (FileResponse) {}
    rpc StartTraining (TrainingRequest) returns (TrainingResponse) {}
}

message FileChunk {
    string filename = 1;
    int32 id = 2;
    bytes chunk = 3;
    bool is_last_chunk = 4;
}
  
message FileResponse {
    int32 err_code = 1;
    string msg = 2;
}

message ClientInfo {
    int32 id = 1;
    string ip = 2;
    int32 port = 3;
}

message ClientResponse {
    int32 err_code = 1;
    string msg = 2;
}

// Message for Federated Learning configuration
message FLConfig {
    int32 num_epochs = 1;
    float learning_rate = 2;
    string optimizer = 3;
    int32 batch_size = 4;
    string model_type = 5;
    float client_fraction = 6;
}

// Response for FL initialization
message FLResponse {
    int32 err_code = 1;
    string msg = 2;
}

// Request for starting training on a client
message TrainingRequest {
    int32 round_id = 1;
    string model_version = 2;
    string model_path = 3;
    int32 local_epochs = 4;
}

// Response from client after training
message TrainingResponse {
    int32 err_code = 1;
    string msg = 2;
    int32 client_id = 3;
    int32 round_id = 4;
    int32 samples_processed = 5;
}
